# This is the main configuration file for the application.
# ~~~~~

slick {
  dbs {
    default {
      profile = "slick.jdbc.MySQLProfile$"
      driver = "com.mysql.jdbc.Driver"
      db.url = "jdbc:mysql://localhost:3306/freelance?useLegacyDatetimeCode=false&serverTimezone=Europe/Paris"
      db.user = "root"
      db.password = "rootroot83"
    }
  }
}
db.default.enabled = true
applyEvolutions.db=true
applyEvolutions.default=true
applyDownEvolutions.default=true


# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key = "6d7151ca13a419402a48"

## Modules
# ~~~~~
play.modules {
  enabled += "modules.SilhouetteModule"
  disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
  disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"
}

# The application languages
# ~~~~~
play.i18n.langs = [ "en", "fr" ]

## Play HTTP settings
# ~~~~~
play.http {
  requestHandler = "play.api.http.DefaultHttpRequestHandler"
  filters = "utils.Filters"
}

## Filter Configuration
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
play.filters {

  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  enabled += filters.ExampleFilter

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  headers {
    contentSecurityPolicy = null
  }

  cors {

    # The path prefixes to filter.
    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = null

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour

    # Whether to serve forbidden origins as non-CORS requests
    serveForbiddenOrigins = false
  }

  # CSRF config
  csrf {

    # Cookie configuration
    cookie {
      # If non null, the CSRF token will be placed in a cookie with this name
      name = "PLAY_CSRF_TOKEN"

      # Whether the cookie should be set to secure
      secure = ${play.http.session.secure}

      # Whether the cookie should have the HTTP only flag set
      httpOnly = false
    }

    # Content type lists
    # If both white lists and black lists are empty, then all content types are checked.
    contentType {
      # If non empty, then requests will be checked if the content type is not in this list.
      whiteList = []

      # The black list is only used if the white list is empty.
      # Only check content types in this list.
      blackList = [
        "application/x-www-form-urlencoded",
        "multipart/form-data",
        "text/plain",
        "application/json",
      ]
    }
  }
}

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

play.filters.headers.contentSecurityPolicy = null

play.http.parser.maxDiskBuffer=100MB

parsers.anyContent.maxLength=100MB

akka.http.server.parsing.max-method-length=100MB

baseUrl = "http://localhost:9000/"


play.filters.enabled += "play.filters.cors.CORSFilter"

play.filters.cors {
  pathPrefixes = ["/"]
  allowedOrigins = ["http://localhost:8080"]
  allowedHttpMethods = ["GET", "POST", "PUT", "DELETE"]
  allowedHttpHeaders = ["Accept", "Content-Type"]
}

play.filters.enabled=[play.filters.hosts.AllowedHostsFilter]

play.filters.hosts {
  # Allow requests to localhost:9000.
  allowed=["localhost:9000","127.0.0.1:9000"]
}

play.i18n.langs=["en"]

## Modules
# ~~~~~
play.modules {
  enabled += "modules.SilhouetteModule"
  disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
  disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"
}


include "silhouette.conf"
